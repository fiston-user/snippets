generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts  Account[]
    sessions  Session[]
    snippets  Snippet[]
    comments  Comment[]
    likes     Like[]
    bookmarks Bookmark[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Snippet {
    id          String   @id @default(cuid())
    title       String
    description String
    code        String   @db.Text
    language    String
    framework   String?
    category    String
    tags        String[]
    isPublic    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    views       Int      @default(0)

    authorId  String
    author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    comments  Comment[]
    likes     Like[]
    bookmarks Bookmark[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorId  String
    author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    snippetId String
    snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
}

model Like {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    snippetId String
    snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

    @@unique([userId, snippetId])
}

model Bookmark {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    snippetId String
    snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

    @@unique([userId, snippetId])
}
